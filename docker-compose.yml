version: '3'

services:
  web:
    build:
      context: .
      dockerfile: app/Dockerfile.web
    env_file: .env
    environment:
      DEBUG: "True"
      DATABASE_URL: "postgres://postgres:hackme@db:5432/postgres"
      MONGODB_URI: "mongodb://mongo:27017/main"
      S3_ACCESS_KEY: "minio"
      S3_ACCESS_SECRET: "minio123"
      S3_BUCKET: "filestorage"
      S3_ENDPOINT: "http://storage:9000"
      S3_DOMAIN: "http://localhost:9000/filestorage"
      GUNICORN_ARGS: "--reload"
    ports:
      - "8080:8080"
    volumes:
      - ./app:/app:ro
      - ./lib:/pythonpkg/lib:ro
      - ./feeds:/pythonpkg/feeds:ro
    depends_on:
      - db
      - mongo
      - storage
  web-migrate:
    build:
      context: .
      dockerfile: app/Dockerfile.web
    command: "'sleep 1; python manage.py migrate'"
    env_file: .env
    environment:
      DATABASE_URL: "postgres://postgres:hackme@db:5432/postgres"
    volumes:
      - ./app:/app:ro
      - ./lib:/pythonpkg/lib:ro
      - ./feeds:/pythonpkg/feeds:ro
    depends_on:
      - db
  db:
    image: postgres:alpine
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql
    environment:
      POSTGRES_PASSWORD: hackme
  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
  storage:
    image: minio/minio
    volumes:
      - storage_data:/data
    ports:
      - "9000:9000"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server /data
  createbuckets:
    image: minio/mc
    depends_on:
      - storage
    entrypoint: >
      /bin/sh -c "
      mc config host add myminio http://storage:9000 minio minio123 &&
      mc mb myminio/filestorage &&
      mc policy download myminio/filestorage
      "
  localtunnel:
    image: efrecon/localtunnel
    env_file: .env
    restart: always
    depends_on:
      - web
    command: --port 8080 --subdomain ${TUNNEL_NAME}
    network_mode: "host"

volumes:
  db_data: {}
  mongo_data: {}
  storage_data: {}
